/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme;

import control.Control;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import klase.Korisnik;
import klase.Prevoz;
import klase.Putovanje;

/**
 *
 * @author lazar
 */
public class PrikazPrijava extends javax.swing.JFrame {
    List<Putovanje> lista;
    Korisnik korisnik;
    Menu meni;
    /**
     * Creates new form PrikazPrijava
     */
    public PrikazPrijava(Menu m, Korisnik k) {
        initComponents();
        meni=m;
        korisnik=k;
       
            popuniTabelu();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prijave");
        setResizable(false);

        jButton1.setText("Nazad");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Izmeni");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Vase Prijave:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Datum ulaska", "Datum izlaska", "Datum prijave", "Zemlja", "Prevoz", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(100);
            jTable1.getColumnModel().getColumn(1).setMinWidth(100);
            jTable1.getColumnModel().getColumn(2).setMinWidth(100);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setMinWidth(115);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        jButton3.setText("Izbrisi");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        meni.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       //da bi se osvezite, napravi novi objekat ove klase
        if(lista.size()==0){
        JOptionPane.showMessageDialog(null, "Jos uvek nemate ni jednu prijavu");
        return;
        }  
        if(jTable1.getSelectedRowCount()!=1){
        JOptionPane.showMessageDialog(null, "Izaberite samo jednu prijavu koju zelite da izmenite");
        return;
        }
     /////  // DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
        int row=jTable1.getSelectedRow();  //1 ili o je index?
        String status=jTable1.getValueAt(row, 5).toString();
        if(status.strip().equals("zakljucana")){
        JOptionPane.showMessageDialog(null, "Put je zakazan za manje od dva dana, ne mozete vise da pravite izmene");
        return;
        }
        if(status.strip().equals("zavrsena")){
        JOptionPane.showMessageDialog(null, "Put je ili u toku ili je zavrsen, ne mozete vise da pravite izmene");
        return;
        }
        LocalDate datU= LocalDate.parse(jTable1.getValueAt(row, 0).toString(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate datI= LocalDate.parse(jTable1.getValueAt(row, 1).toString(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate datP= LocalDate.parse(jTable1.getValueAt(row, 2).toString(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        //zemlja 3
        String z=jTable1.getValueAt(row, 3).toString();
        List<String> zemlja=new LinkedList<>();
        zemlja.add(z);
        Prevoz prevoz=Prevoz.valueOf(jTable1.getValueAt(row, 4).toString());
        Putovanje put=new Putovanje(-1, datU, datI, prevoz, datP, zemlja);
        IzmenaPrijave f1=new IzmenaPrijave(korisnik, put, meni);
        f1.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         if(lista.size()==0){
        JOptionPane.showMessageDialog(null, "Jos uvek nemate ni jednu prijavu");
        return;
        }  
        if(jTable1.getSelectedRowCount()!=1){
        JOptionPane.showMessageDialog(null, "Izaberite samo jednu prijavu koju zelite da izbrisete");
        return;
        }
     /////  // DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
        int row=jTable1.getSelectedRow();  //1 ili o je index?
        String status=jTable1.getValueAt(row, 5).toString();
        if(status.strip().equals("zakljucana")){
        JOptionPane.showMessageDialog(null, "Put je zakazan za manje od dva dana, ne mozete vise da pravite izmene");
        return;
        }
        if(status.strip().equals("zavrsena")){
        JOptionPane.showMessageDialog(null, "Put je ili u toku ili je zavrsen, ne mozete vise da pravite izmene");
        return;
        }
        LocalDate datU= LocalDate.parse(jTable1.getValueAt(row, 0).toString(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate datI= LocalDate.parse(jTable1.getValueAt(row, 1).toString(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate datP= LocalDate.parse(jTable1.getValueAt(row, 2).toString(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        //zemlja 3
        String z=jTable1.getValueAt(row, 3).toString();
        List<String> zemlja=new LinkedList<>();
        zemlja.add(z);
        Prevoz prevoz=Prevoz.valueOf(jTable1.getValueAt(row, 4).toString());
        Putovanje put=new Putovanje(-1, datU, datI, prevoz, datP, zemlja);
        Control control=Control.getInstance();
        try {
            boolean b=control.brisanjePutovanja(put, korisnik);
            if(!b)
                throw new Exception();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Greska na serveru");
            return;
        }
        JOptionPane.showMessageDialog(null, "Obrisali ste prijavu");
        PrikazPrijava f1=new PrikazPrijava(meni, korisnik);
        f1.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void popuniTabelu() {
        DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
        Object[] niz=new Object[6];
        Control control=Control.getInstance();
        try {
            lista= control.listaPutovanja(korisnik);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Greska na serveru");
            System.exit(0);
        }
        
        if(lista==null){
            JOptionPane.showMessageDialog(null, "Doslo je do greske na serveru");
            System.exit(0);
        }
            
        if(lista.size()==0){
            JOptionPane.showMessageDialog(null, "Jos nemate ni jednu prijavu");
            return;
        }
            
        for (Putovanje putovanje : lista) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            String datU = putovanje.getDatumUlaska().format(formatter);
            String datI = putovanje.getDatumIzlaska().format(formatter);
            String datP = putovanje.getDatumPrijave().format(formatter);
        niz[0]=datU;
        niz[1]=datI;
        niz[2]=datP;
        niz[4]=putovanje.getPrevoz().toString();
        long dani=Math.abs(ChronoUnit.DAYS.between(putovanje.getDatumPrijave(), putovanje.getDatumUlaska()));
        int t=0;
        if(dani<2){
        niz[5]="zakljucana";
        t=1;
        }
            
        if(!putovanje.getDatumUlaska().isAfter(LocalDate.now())){
        niz[5]="zavrsena";
        t=1;
        }
        if(t==0)
            niz[5]="u obradi";
        
        
            for (String string : putovanje.getZemlje()) {
                niz[3]=string;
                model.addRow(niz);
            }
        
        }
        
    
    }
}
